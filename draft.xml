<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC1122 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC1918 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1918.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC3493 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3493.xml">
<!ENTITY RFC3879 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3879.xml">
<!ENTITY RFC4191 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4191.xml">
<!ENTITY RFC6418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6418.xml">
<!ENTITY RFC6724 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6724.xml">
<!ENTITY RFC7556 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7556.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info"
     ipr="trust200902"
     docName="draft-kline-mif-mpvd-api-reqs-00">

  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->


  <front>
    <title abbrev="MPvD API Requirements"
      >Multiple Provisioning Domains API Requirements</title>

    <author fullname="Erik Kline"
            initials="E." surname="Kline">
      <organization>Google Japan KK</organization>
      <address>
        <postal>
          <street>6-10-1 Roppongi</street>
          <street>Mori Tower, 44th floor</street>
          <city>Minato</city>
          <region>Tokyo</region>
          <code>106-6126</code>
          <country>JP</country>
        </postal>
        <phone></phone>
        <email>ek@google.com</email>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>api</keyword>
    <keyword>application</keyword>
    <keyword>mif</keyword>
    <keyword>mpvd</keyword>
    <keyword>pvd</keyword>

    <abstract>
      <t>
<xref target="RFC7556">RFC 7556</xref> provides the essential conceptual
guidance an API designer would need to support use of PvDs.  This document
aims to capture the requirements for an API that can be used by applications
that would be considered "advanced", according to
<eref target="https://tools.ietf.org/html/rfc7556#section-6.3"
      >section 6.3</eref> of <xref target="RFC7556">RFC 7556</xref>.  The
<eref target="https://tools.ietf.org/html/rfc7556#section-6.1"
      >"basic"</eref> and
<eref target="https://tools.ietf.org/html/rfc7556#section-6.2"
      >"intermediate"</eref> API support levels can in principle be implemented
by means of layers wrapping the advanced API.
      </t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction">
      <t>
<xref target="RFC7556">RFC 7556</xref> provides the essential conceptual
guidance an API designer would need to support use of PvDs.  This document
aims to capture the requirements for an API that can be used by applications
that would be considered "advanced", according to
<eref target="https://tools.ietf.org/html/rfc7556#section-6.3"
      >section 6.3</eref> of <xref target="RFC7556">RFC 7556</xref>.  The
<eref target="https://tools.ietf.org/html/rfc7556#section-6.1"
      >"basic"</eref> and
<eref target="https://tools.ietf.org/html/rfc7556#section-6.2"
      >"intermediate"</eref> API support levels can in principle be implemented
by means of layers wrapping the advanced API.
      </t>
      <t>
This document also attempts to make some of the API implementation requirements
more concrete by discussion and example.
      </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="high_level" title="High level requirements">
      <t>
As described in
<eref target="https://tools.ietf.org/html/rfc7556#section-2">section 2</eref>
of <xref target="RFC7556">RFC 7556</xref>, a Provisioning Domain ("PvD") is
fundamentally a "consistent set of network configuration information."
This includes information like:
        <list style="symbols">
<t>the list of participating interfaces</t>
<t>IPv4 and IPv6 addresses</t>
<t>IPv4 and IPv6 routes: both default routes and more specifics
   (such as may be learned via <xref target="RFC4191">RFC 4191</xref>
    Route Information Options ("RIOs"))</t>
<t>DNS nameservers, search path, et cetera</t>
<t>HTTP proxy configuration</t>
        </list>
and undoubtedly many more configuration elements yet to be specified (like
metering hints, transmission medium and speed, captive portal URL, et cetera).
      </t>
      <t>
This configuration information as whole may not be able to be learned
atomically, may need to be synthesized from multiple sources including
administrative provisioning, and cannot be presumed to be unchanging over the
lifetime of a node's association with a given PvD.
      </t>
      <t>
In order for an application to make
<eref target="https://tools.ietf.org/html/rfc7556#section-5.2"
  >consistent use</eref> of a given PvD's network configuration several
requirements are placed upon the API itself and the host operating system
providing the API.
      </t>

      <section title="Requirements for an API">
        <t>
At the highest level, the requirements for an API that enables applications to
make sophisticated use of multiple PvDs amount to providing mechanisms by
which they can:
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
observe accessible PvDs
<vspace blankLines="1"/>
It MUST be possible for an application to be informed of the set of all PvDs it
can currently access, and to be informed of changes to this set.
            </t>
            <t>
observe configuration elements of an accessible PvD
<vspace blankLines="1"/>
It MUST be possible to learn requested configuration information of any
accessible PvD, and to be informed of any changes to the configuration
information comprising an accessible PvD.
            </t>
            <t>
scope networking functionality to a specified PvD
<vspace blankLines="1"/>
For every existing API function that interacts with the node's networking
stack, be it at a relatively high level like
<eref target="https://tools.ietf.org/html/rfc3493#section-6.1"
  >getaddrinfo()</eref> or at the level of something like Sockets API's
sendmsg(), there MUST be a means by which an application can specify the
PvD within which networking operations are to be restricted. 
            </t>
            <t>
consistent use of programmatic references to PvDs
<vspace blankLines="1"/>
For uniformity and simplicity, every PvD-aware API functional element
SHOULD use (as return values of function calls, function arguments, et cetera)
the same programmatic reference for PvDs, e.g. a construct containing a
<eref target="https://tools.ietf.org/html/draft-ietf-mif-mpvd-id"
  >PvD identifier</eref> or some equivalent shorthand reference token
(see <xref target="tokens"/> for a discussion of implementation considerations).
            </t>
          </list>
It is import to note that there is always a provisioning domain within which
networking functionality is scoped. For simply-connected hosts this may be the
<eref target="https://tools.ietf.org/html/rfc7556#section-2.2"
  >implicit PvD</eref> created by a single networking interface connected to a
traditional, shared LAN segment. For multihomed hosts the
"default provisioning domain" is likely a matter of policy, but MAY be a
"null" PvD, i.e. one completely devoid of networking configuration information
(no addresses, no routes, et cetera). See <xref target="concept_pvds"/> for
further discussion.
        </t>
        <t>
The utility of such an API (allowing applications to learn of and control the
scope of networking functionality) suggests that the Provisioning Domain is
perhaps a more useful operational definition for the original IPv6 concept
of a "site-local scope" than the <xref target="RFC3879">ill-fated</xref>,
<eref target="https://tools.ietf.org/html/rfc3879#section-2.5"
  >"ill-defined concept"</eref> of a site. It also suggests one possible way
by which host operating support for a PvD-aware API might be implemented.
        </t>
      </section>

      <section title="Requirements for supporting operating systems">
        <t>
The multiple PvD model of host behaviour is perhaps closer to the Strong End
System Model than the Weak End System Model characterized in
<xref target="RFC1122">RFC 1122</xref>
<eref target="https://tools.ietf.org/html/rfc1122#section 3.3.4.2"
  >section 3.3.4.2</eref>, but owing to its recognition of a many-to-many
relationship between interfaces and PvDs should be considered a unique model
unto itself.
        </t>
        <t>
In the PvD-aware End System Model, the "two key requirement issues related to
multihoming" are restated as:
          <list hangIndent="4" style="letters">
            <t>
A host MAY silently discard an incoming datagram whose destination address
does not correspond to any PvD associated with the physical (or virtual)
interface through which it is received.
            </t>
            <t>
A host MUST restrict itself to sending (non-source-routed) IP datagrams only
through the physical (or virtual) interfaces that correspond to the PvD
associated with the IP source address of the datagrams.
            </t>
          </list>
        </t>

        <t>
In order to support a PvD-aware application's use of multiple PVDs, several
additional requirements must be met by the host operating system, especially
when performing functions on behalf of applications or when no direct
application intervention is possible, as discussed in the following sections.
        </t>

        <section title="Source address selection">
          <t>
Whenever a source address is to be selected on behalf of an application it
is essential for consistent use that only source addresses belonging to the
currently scoped PvD be used a candidate set. (See <xref target="RFC6418">RFC
6418</xref> <eref target="https://tools.ietf.org/html/rfc6418#section-3.5"
  >section 3.5</eref> for references to issues arising from poor source
address selection.)
          </t>
          <t>
For nodes following the PvD-aware End System Model,
<xref target="RFC6724">RFC 6724</xref>
<eref target="https://tools.ietf.org/html/rfc6724#section-4">section 4</eref>
is amended as follows:
            <list counter="reqs" hangIndent="4" style="format R%d">
              <t>
The candidate source addresses MUST be restricted to the set of unicast
addresses associated with the (explicitly or implicitly) specified PvD.
<vspace blankLines="1"/>
Additionally, source address selection policies from PvDs other than the
(explicitly or implicitly) specified PvD MUST NOT be applied.
              </t>
            </list>
          </t>
        </section>

        <section title="Route isolation">
          <t>
Whenever a routing lookup for destination is to be performed, it is essential
that only routes belonging to the currently scoped PvD be consulted.
Applications and libraries that use the inherent routing reachability check
(and subsequent source address selection) performed during something like the
Sockets API connect() call on a UDP socket to learn reachability information
cheaply cannot function correctly otherwise.
<xref target="RFC6418">RFC 6418</xref>
<eref target="https://tools.ietf.org/html/rfc6418#section-4.2"
  >section 4.2</eref> contains more discussion and references to issues
arising from insufficiently isolated routing information.
          </t>

          <t>
For nodes following the PvD-aware End System Model:
            <list counter="reqs" hangIndent="4" style="format R%d">
              <t>
The set of routes consulted for any routing decision MUST be restricted to the
routes associated with the (explicitly or implicitly) specified PvD.
              </t>
            </list>
          </t>
        </section>

        <section title="Automatic PvD metadata marking">
          <t>
In many cases, an application can examine a source address or the
destination address of a received datagram and use that address's association
with a given PvD to learn, for example, the PvD with which an incoming
connection may be associated. It may, however, be impossible for an application
to make this determination on its own if, for example, an incoming TCP
connection is destined to a <xref target="RFC1918">RFC 1918</xref> address
that happens to be configured in multiple PvDs at the same time. In such
circumstances, the supporting operating system will need to provide additional
assistance.
          </t>
          <t>
For nodes following the PvD-aware End System Model:
            <list counter="reqs" hangIndent="4" style="format R%d">
              <t>
For networking functionality performed on behalf of an application, the
supporting operating system MUST record and make available to the
application either (1) all the information the application might need to make
a PvD evaluation on its own or (2) the API's PvD programmatic reference
directly.
<vspace blankLines="1"/>
A supporting operating system SHOULD record and make
available the API's PvD programmatic reference; other approaches invite
ambiguity among applications' interpretation of available information.
              </t>
            </list>
          </t>
        </section>

        <section title="Additional system and library support">
          <t>
Frequently, operating systems have several additional supporting libraries and
services for more advance networking functionality. Using the system's own
PvD API, meeting the above requirements, it should be possible to extend them
to provide correct per-PvD isolation of information and application support.
          </t>
        </section>
      </section>
    </section>

    <section anchor="concept_pvds" title="XXX Conceptual PvDs">
      <section anchor="null_pvd" title="XXX The 'null' PvD">
        <t>
Useful to ensure networking functions fail (and fail quickly)
If there are no PvDs accessible to a user/group/application, either as a
matter of policy (insufficient privileges) or as a matter of natural
circumstance (the node is not connected to any network), the 'null' PvD may
be a suitable PvD for the API to return to application queries or to apply as
the PvD of use in the absence of other explicitly reference PvDs.
        </t>
      </section>
      <section anchor="loopback_pvd" title="XXX The 'loopback' PvD">
        <t>
    - useful to scope networking functions to the node only
    - has only locally assigned addresses and routes specifying local delivery and no default routes
    - MAY have other configuration elements consisting of locally accessible services
    - TODO: ask for help/clarification here
        </t>
      </section>
      <section anchor="default_pvd" title="XXX The 'default' PvD">
        <t>
PvD-aware system as a whole SHOULD have a notion of currently active default PvD
        </t>
        <t>
- makes "basic 6.1" trivial
    - without this application behaviour will be highly system dependent (does the system iterate through PvDs, in some order, trying to find a PvD in which a certain op succeeds?)
    - this is the PvD to use for operations for which a PvD must be selected and no explicity PvD API has been used
    - as a matter of policy, this MAY be a "null" PvD, effectively requiring all apps to be PvD-aware, or "loopback" to permit locally communications only for non-PvD-aware apps
    - SHOULD be a way to communicate changes in the default PvD
    - MUST be able to specify that the default PvD is to be used
        </t>
      <t>
For backward compatibility for non-PvD-aware applications, there MUST exist a "default PvD", i.e. a PvD within which system functions requiring a PvD are to be performed.
      </t>
      <t>
It is expected that most nodes will use a variety of information coupled with administrative policy to promote one of a number of currently active PvDs to be the default for ease of backward compatibility, and to
promote another active PvD in its place as circumstances change.
      </t>
<t>TBD: 'PVD_UNSPEC'</t>
      </section>
    </section>

    <section title="Requirements for new API functionality">
      <section title="Learning of PvD availability">
        <t>
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A PvD-aware API MUST implement a mechanism whereby an application can receive
a set of the API's PvD programmatic references representing the complete set of
PvDs (both
<eref target="https://tools.ietf.org/html/rfc7556#section-2.1"> explicit</eref>
and
<eref target="https://tools.ietf.org/html/rfc7556#section-2.2"> implicit</eref>)
with which the node is currently associated.
            </t>
            <t>
A PvD-aware API implementation SHOULD contain a mechanism enabling an
application to be notified of changes in the above set of actively associated
PvDs in a comparatively efficient manner (i.e. more efficient than polling).
            </t>
          </list>
        </t>
      </section>

      <section
          title="Learning network configuration information comprising a PvD">

        <t>
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A PvD-aware API MUST include a mechanism whereby by an application, using the
API's PvD programmatic reference, can receive elements of the network
configuration information that comprise a PvD.
At a minimum, this mechanism MUST be capable of answering queries for:
<list style="symbols">
<t>the PvD identifier</t>
<t>all participating interfaces</t>
<t>all IPv4 and all non-deprecated IPv6 addresses</t>
<t>all configured DNS nameservers</t>
</list>
            </t>
          </list>
        </t>

        <t>
A PvD's network configuration information is neither guaranteed to be learned
atomically nor is it guaranteed to be static. Addresses, routes, and even
DNS nameservers and participating interfaces may each change over the lifetime
of the node's association to a given PvD. Timely notification of such changes
may be of particular importance to some applications.
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A PvD-aware API implementation SHOULD contain a mechanism enabling an
application to be notified of changes in the networking configuration
information comprising a PvD in a comparatively efficient manner
(i.e. more efficient than polling).
            </t>
          </list>
        </t>

        <t>
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A network configuration query API implementation SHOULD take extensibility
into account, to support querying for configuration information not yet
conceived of with minimal adverse impact to applications.
            </t>
          </list>
        </t>
      </section>

      <section title="XXX Scoping functionality to a specific PvD">
        <t>
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A PvD-aware API implementation MUST include a mechanism for an application
to specify the PvD programmatic reference of the PvD to which all
networking functionality MUST be restricted when not otherwise explicitly
specified (an application-specific "default PvD").
            </t>
            <t>
The API implementation MUST support setting such a "default PvD" for an
application's entire process (and by extension its child processes).
Additionally, the API SHOULD support an application setting a "default PvD"
at every granularity of "programming parallelization", i.e. not only
per-process, but also per-thread, per-fiber, et cetera.
            </t>
            <t>
For every degree of granularity at which an application may specify a
"default PvD" there MUST exist a corresponding mechanism to retrieve the
currently specified implementation-specific PvD programmatic reference.
            </t>
          </list>
        </t>

        <t>
XXX
    - useful for being able to start non-PvD-aware apps within a single PvD context unbeknownst to them and operate correctly
        - indeed, this could be used as a definition / validation that a PvD implementation is correct: non-PvD-aware apps function correctly, with no negative impact, in a single PvD without being PvD-aware
        </t>
      </section>

      <section anchor="exp_vs_imp" title="XXX Explicit versus Implicit PvDs">
        <t>
- the API used by PvD-aware applications MUST support both implicit and explicit PvDs
- It SHOULD NOT be necessary for a PvD-aware application to distinguish between explicit and implicit PvDs.  Both SHOULD be equally accessible and useful via the same API calls.
- PvD-aware nodes should provide PvD identifiers for implicit PvDs that can be used without application change in the same ways as explicit PvDs
        </t>
<t>
For every element of system functionality that has historically been performed in the context of a single, implicit PvD an API extension MUST exist allowing the application to specificy that the same functionality be
performed within the scope of an explicitly requested PvD (via identifier or handle).
</t>
      </section>

      <section anchor="policy" title="Policy restrictions">
        <t>
This document does not make recommendations about policies governing the use
of any or all elements of a PvD API, save only to note that some restrictions
on use may be deemed necessary or appropriate.
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A PvD API implementation MAY implement policy controls whereby access to
PvD availability information, configuration elements, and/or explicit scoping
requests is variously permitted or denied to certain applications.
            </t>
          </list>
        </t>
      </section>

      <section anchor="tokens"
               title="XXX PvD Programmatic reference implementation considerations">
        <t>
  - node-specific token used to identify an instance of a single provisioning domain's configuration data

// Not guaranteed to be stable across across associations to a PVD.
//
// The same PVD may have different pvd_handle_t's if, for example,
// when reattaching later to the same PVD (returning home in the
// evening), the same PVD may be assigned a different pvd_handle_t.
//
// The pvd_handle_t must remain valid until a disconnection or
// disassociation event occurs, after which the pvd_handle_t MUST NOT
// be recycled to refer to a different PVD so long as there remain
// any identifiable references to it (e.g. a process or thread still
// has this PVD index set as its default).
//
// Applications explicitly specifying PVD indices to PVD-aware
// functions are not readily identifiable (indeed an application
// could progressively walk the PVD index space attempting various
// function calls without ever having received any indication from
// the system that a given index was valid).  In order to account for
// this, PVD indices SHOULD NOT be recycled, to the extent possible.
// One acceptable implementation approach is to assign every new PVD
// context a strictly monotonically increasing index, such that any
// specific index is not reused until the unsigned integer space has
// been completely exhausted, before restarting again from 1.

// The value PVD_HANDLE_UNSPEC is used to indicate no specific PVD.
//
// Depending on the context it may indicate that the system does not
// implement support for the Provisioning Domain API, an error, or
// a signal to "clear" previous PVD index state.

  - a given provisioning domain MUST NOT be assumed to have the same handle across attaches

  - implementations SHOULD NOT re-use the same handle for the same provisioning domain across
    attaches because: awesome explanation goes here.

        </t>
        <t>
Given that PvD identifiers may be of a length or form not easily passed around programmatically, API implementions SHOULD consider a programmatically simple handle for use with the variety of API calls.

https://tools.ietf.org/html/rfc7556#section-2.4
        </t>

<t>
API implementations that use short handles to reference PvD information (identifiers, configuration information) SHOULD consider varying the handle used for
a specific PvD with each separate attach, e.g. a 3GPP connection to "apn.carrier.example" might have handle 100 for the first attach after boot,
and 101 for the next attach after going into and coming out of "airplane mode".  Because there is no guarantee that the configuration information, like delegated
prefixes and configured IP addresses, will be the same with every successful attachment to the same PvD, changing the handle accordingly can help
to disabuse application writers of erroneous notions of caching PvD configuration information from one attachment instance to another.
</t>
      </section>
    </section>

    <section title="XXX Updated API functions for scoping functionality to a specific PvD">
      <t>
- everything that implicitly used a single PvD, e.g. when a single interface was connected to a single PvD network, SHOULD be extended to be invoked with a PvD argument
      </t>
      <t>
In order to ease porting of non-PVD-aware applications as well as support
non-PVD-aware applications in accordance with the principle of least surprise
it is recommended that the following functionality be added to existing
system networking APIs.
      </t>
      <t>
sockets API

- setsockopt() / getsockopt()
    - IP_RECVPVD / IPV6_RECVPVD
        - recvmsg() should include indication of PVD to which the packet arrived
    - IP_PVD / IPV6_PVD
        - source address selection and applicable routing table is restricted to the specified PvD
        - if a source address has already been selected from one PvD, transmitting via another PvD is NOT RECOMMENDED (but of course possible)
    - PVD_UNSPECIFIED
        - no PvD explicitly requested
        - also used to clear a process or thread default and revert to system default
    - for PF_INET / PF_INET6 sockets

- socket()
    - if a process-default or thread-default PvD has been set, the returned file descriptor must be "bound" to the PvD
        - i.e. as if setsockopt(SOL_IPV6, IPV6_PVD, ...) had been called
    - otherwise, the file descriptor defaults to PVD_UNSPECIFIED

- bind()
    - if a PvD is specified and address is unspecified, it is RECOMMENDED source address selection be restricted to this PVD
    - else if a PvD is specified and address is not unspecified, EADDRNOTAVAIL might be returned
    - else best effort / system-specific policies apply

- listen()
    - if the file descriptor is already bound to a PvD, only traffic to one of the PvD's addresses should cause the file descriptor to become readable
    - other traffic should receive an ICMP error

- accept()
    - returned file descriptors should be bound to the PvD of:
        - the listening socket, if it was not bound to PVD_UNSPECIFIED
        - the PvD of the destination address on the system

- connect()
    - bind() discussion applies for source address selection
    - EHOSTUNREACH / ENETUNREACH might be returned

sendmsg() / recvmsg() cmsg semantics
- setsockopt() / getsockopt() options apply
    - IP_RECVPVD / IPV6_RECVPV6
    - IP_PVD / IPV6_PVD
      </t>
      <t>
- sockets examples:

/*
 * getsockopt()/setsockopt()
 *
 * The header file sys/socket.h SHALL define SO_PVD_HANDLE in supporting
 * implementations, for use with getsockopt/setsockopt and the SOL_SOCKET
 * level.  The option_value shall be understood to be a pointer to a
 * pvd_handle_t and the option_len is required to be sizeof(pvd_handle_t).
 *
 * Setting the SO_PVD_HANDLE option constrains all operations on the
 * specified socket to function only within the specified PVD currently
 * described by pvd_handle_t.  If the pvd_handle_t argument has the value
 * PVD_HANDLE then the operating-system policy-defined default is
 * to be used (see net/pvd.h).
 */

/*
 * recvmsg()/sendmsg()
 *
 * The same SO_PVD_HANDLE defined above shall be used as the cmsg_type in
 * conjunction with the SOL_SOCKET cmsg_level to specify struct cmsghdr
 * entries for use with recvmsg() and sendmsg().  These have the same
 * effect described above though applicability is limited to the immediate
 * sendmsg()/recvmsg() invocaton and not for the lifetime the socket file
 * descriptor.
 *
 * In certain situations it may be difficult or impossible for an operating
 * system to determing the correct pvd_handle_t for incoming messages (e.g.
 * when there are multiple provisioning domains in a single interface and
 * the system is unable to determine which PVD should be associated with
 * the source of the message.  In such cases, the value returned in the
 * cmsg_data field MAY be PVD_HANDLE. This is not an error, but
 * rather an underspecified situation.
 */

/*
 * accept()
 *
 * If a listening socket is associated with a single PVD, e.g. via a prior
 * call to pvd_set_*_default(...) or setsockopt(SOL_SOCKET, SO_PVD_HANDLE, ...)
 * then traffic arriving from other provisioning domains MUST NOT cause a new
 * connection.
 *
 * Furthermore, whether or not a listening socket has a specified PVD, the
 * specified PVD MUST be set for the accept()ed file descriptor.  Note that
 * in certain situations (e.g. listening socket using PVD_HANDLE_UNSPEC and
 * multiple PVDs on a single interface with insufficient data to map
 * incoming traffic to specific PVDs), the specified PVD MAY be
 * PVD_HANDLE_UNSPEC.  This is not an error, but rather an underspecified
 * situation.
 *
 * More broadly, operating systems SHOULD, wherever possible, implement
 * this style of incoming specified pvd_handle_t reflection for other protocols
 * with similar accept()-style semantics.
 */

      </t>
      <section title="XXX DNS resolution">
        <t>
        </t>
        <t>
For nodes following the PvD-aware End System Model:
          <list counter="reqs" hangIndent="4" style="format R%d">
            <t>
A PVD-aware API MUST make it possible for an application to perform
normal name resolution constrained to the name resolution configuration
within a specified PVD.

/*
 * getaddrinfo w/ pvd_handle_t argument
 */

/*
 * getnameinfo w/ pvd_handle_t argument
 */

Implementations of <xref target="RFC3493">RFC 3493</xref>
<eref target="https://tools.ietf.org/html/rfc3493#section-6.1"
  >section 6.1</eref> getaddrinfo()

- getaddrinfo() and AI_ADDRCONFIG
    - RFC3493#section-6.1 "...shall be returned only if an IPv4/v6 address is configured on the local system..." -> "... within the requested PvD"

            </t>
          </list>
        </t>
      </section>


    </section>

    <!-- Possibly a 'Contributors' section ... -->
    <section anchor="acks" title="Acknowledgements">
      <t>
The core concepts presented in this document were developed during the
Android multinetworking effort by Lorenzo Colitti, Robert Greenwalt,
Paul Jensen, and Sreeram Ramachandran.
      </t>
      <t>
Additional thanks to the coffee shops of Tokyo.
      </t>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="XXX Security Considerations">
      <t>
Consider whether 7556 section 8 should be referenced.  Possibly not, since
those seem to be focused on external PvD-altering threats.
      </t>
      <t>
The major new security impact of a PvD-aware API is that it becomes much
simpler (by design) to write a functional application to create a bridging
data path between two PvDs that would not have otherwise necessarily have been
so easily connected.
      </t>
      <t>
For some operating systems, existing APIs already make this bridging
possible, though some functionality like DNS resolution may have been
difficult to implement.  Indeed, the very aim of an MPvD API is to make
implementing a PvD-aware application simple and to make its functioning
more "correct" ("first class" support for such functionality).
      </t>
      <t>
Operating system implementations have several points of potential policy
control including:
        <list style="symbols">
          <t>
use of certain PvDs MAY be restricted by policy (e.g. only approved users,
groups, or applications might be permitted access), and/or
          </t>
          <t>
use of more than one PvD (or the MPvD API itself) MAY be similarly restricted.
          </t>
        </list>
      </t>
    </section>
  </middle>


  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC1122;
      &RFC2119;
      &RFC3493;
      &RFC6724;
      &RFC7556;
    </references>

    <references title="Informative References">
      &RFC1918;
      &RFC3879;
      &RFC4191;
      &RFC6418;
    </references>

<!--
    <section anchor="android-comparison" title="Comparison with Android implementation">
      <t>This becomes an Appendix.</t>
    </section>
-->
  </back>
</rfc>
