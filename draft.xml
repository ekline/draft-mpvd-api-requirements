<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">

<!ENTITY RFC3493 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3493.xml">
<!ENTITY RFC6418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6418.xml">
<!ENTITY RFC6419 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6419.xml">
<!ENTITY RFC6724 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6724.xml">
<!ENTITY RFC7556 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7556.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info"
     ipr="trust200902"
     docName="draft-kline-mif-pvd-userspace-api-00">

  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->


  <front>
    <title abbrev="MPvD API">Multiple Provisioning Domains API Requirements</title>

    <author fullname="Erik Kline"
            initials="E." surname="Kline">
      <organization>Google Japan KK</organization>
      <address>
        <postal>
          <street>Roppongi 6-10-1</street>
          <street>Mori Tower, 26th floor</street>
          <city>Minato</city>
          <region>Tokyo</region>
          <code>106-6128</code>
          <country>JP</country>
        </postal>
        <phone></phone>
        <email>ek@google.com</email>
      </address>
    </author>

    <date/>

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>api</keyword>
    <keyword>application</keyword>
    <keyword>mif</keyword>
    <keyword>mpvd</keyword>
    <keyword>pvd</keyword>

    <abstract>
      <t>
<xref target="RFC7556">RFC 7556</xref> provides the essential conceptual
guidance an API designer would need to support use of PvDs.  This document
aims to capture the requirements for an API that can be used by applications
that would be considered "advanced", according to
<eref target="https://tools.ietf.org/html/rfc7556#section-6.3"
      >section 6.3</eref> of <xref target="RFC7556">RFC 7556</xref>.  The
<eref target="https://tools.ietf.org/html/rfc7556#section-6.1"
      >"basic"</eref> and
<eref target="https://tools.ietf.org/html/rfc7556#section-6.2"
      >"intermediate"</eref> API support levels can in principle be implemented
by means of layers wrapping the advanced API.
      </t>
    </abstract>
  </front>


  <middle>
    <section title="Introduction">
      <t>
<xref target="RFC7556">RFC 7556</xref> provides the essential conceptual
guidance an API designer would need to support use of PvDs.  This document
aims to capture the requirements for an API that can be used by applications
that would be considered "advanced", according to
<eref target="https://tools.ietf.org/html/rfc7556#section-6.3"
      >section 6.3</eref> of <xref target="RFC7556">RFC 7556</xref>.  The
<eref target="https://tools.ietf.org/html/rfc7556#section-6.1"
      >"basic"</eref> and
<eref target="https://tools.ietf.org/html/rfc7556#section-6.2"
      >"intermediate"</eref> API support levels can in principle be implemented
by means of layers wrapping the advanced API.
      </t>
      <t>
This document also attempts to make some of the API implementation requirements
more concrete by discussion and example.
      </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="high_level_reqs" title="High level requirements">
      <t>
As described in
<eref target="https://tools.ietf.org/html/rfc7556#section-2">section 2</eref>
of <xref target="RFC7556">RFC 7556</xref>, a Provisioning Domain ("PvD") is
a "consistent set of network configuration information."
      </t>
      <t>
- includes:
    - participating interfaces
    - addresses
    - routes (default routes and more specifics)
    - but also RIO -type information
    - DNS servers and search path
    - HTTP proxy
    - yet to be specified: metering, medium, captive portal URL, ...
- not learned atomically
- not static
      </t>
      <t>
      </t>

      <t>
The rest of this document is concerned with:
- identifying new system requirements
- identifying some existing uses of implicit pvds that will need to be updated to support explicit pvds
      </t>

      <section title="Functional requirements for an API">
        <t>
Two major categories of PvD application API requirements:
- learning about PvDs
    - existence and changes in availability
    - configuration data contained within a PvD ID and changes of configuration information
- selection of a PvD to scope various operations:
    - selection of configuration information
    - selection of source addresses
    - selection of routing information

(consistent use)
https://tools.ietf.org/html/rfc7556#section-5.2
        </t>
      <t>
At the highest level, the requirements for an API that enables applications to
make sophisticated use of multiple PvDs amount to providing mechanisms by
which they can:
        <list counter="reqs" hangIndent="4" style="format R%d">
          <t>
observe accessible PvDs<vspace blankLines="1"/>
It MUST be possible for an application to be informed of the set of all PvDs it
can currently access, and to be informed of changes to this set.
          </t>
          <t>
observe configuration elements of an accessible PvD<vspace blankLines="1"/>
It MUST be possible to learn requested configuration information of any
accessible PvD, and to be informed of any changes to the configuration
information comprising an accessible PvD.
          </t>
          <t>
scope networking functionality to a specified PvD<vspace blankLines="1"/>
For every existing API function that interacts with the node's networking
stack, be it at a relatively high level like
<eref target="https://tools.ietf.org/html/rfc3493#section-6.1"
  >getaddrinfo()</eref> or at the level of something like Sockets API's
sendmsg(), there MUST be a means by which an application can specify the
PvD within which networking operations are to be restricted. 
          </t>
        </list>
      </t>
      </section>

      <section title="Functional requirements for a PvD-aware operating system">
      <t>
In order to support the application's use of multiple PVDs, several
requirements must be fulfilled by the node's operating system
authorized to perform the required functions.

## 5
source address and routing selection

- if a PvD has been specified:
    - it is RECOMMENDED that source address selection be restricted to PvD addresses
        - update RFC6274#section-4
- it is important to return errors
    - might have two PvDs active: one IPv4-only and one IPv6-only
        - ENONET, EPROTONOSUPPORT, EADDRNOTAVAIL, EHOSTUNREACH, ...
- destination reachability:
    - userspace libraries often use connect() tricks to obtain source addresses for sorting
    - this MUST use the routing configuration of the desired PvD
- getaddrinfo() and AI_ADDRCONFIG
    - RFC3493#section-6.1 "...shall be returned only if an IPv4/v6 address is configured on the local system..." -> "... within the requested PvD"

      </t>

        <t>
- more like a strong host model, but one which scopes operations to PvDs not interfaces (include weak/strong and m:n pvd:intf references)
    - http://tools.ietf.org/html/rfc1122 section 3.3.4.2:  Strong/Weak ES model
    - PvD IDs could be thought of as site-local scopes

- required support includes:
    - route isolation
    - address isolation, update to RFC6724 section 4
    - actions peformed by the system must set PvD scope automatically, even for non-PvD apps:
        - TCP accept()
        - incoming datagrams to a UDP server
    - necessary for any API to provide consistent and correct behaviour
        </t>
      </section>
    </section>

    <section title="Conceptual PvDs">
      <section anchor="null_pvd" title="The 'null' PvD">
        <t>
Useful to ensure networking functions fail (and fail quickly)
If there are no PvDs accessible to a user/group/application, either as a
matter of policy (insufficient privileges) or as a matter of natural
circumstance (the node is not connected to any network), the 'null' PvD may
be a suitable PvD for the API to return to application queries or to apply as
the PvD of use in the absence of other explicitly reference PvDs.
        </t>
      </section>
      <section anchor="loopback_pvd" title="The 'loopback' PvD">
        <t>
    - useful to scope networking functions to the node only
    - has only locally assigned addresses and routes specifying local delivery and no default routes
    - MAY have other configuration elements consisting of locally accessible services
    - TODO: ask for help/clarification here
        </t>
      </section>
      <section anchor="default_pvd" title="The 'default' PvD">
        <t>
PvD-aware system as a whole SHOULD have a notion of currently active default PvD
        </t>
        <t>
- makes "basic 6.1" trivial
    - without this application behaviour will be highly system dependent (does the system iterate through PvDs, in some order, trying to find a PvD in which a certain op succeeds?)
    - this is the PvD to use for operations for which a PvD must be selected and no explicity PvD API has been used
    - as a matter of policy, this MAY be a "null" PvD, effectively requiring all apps to be PvD-aware, or "loopback" to permit locally communications only for non-PvD-aware apps
    - SHOULD be a way to communicate changes in the default PvD
    - MUST be able to specify that the default PvD is to be used
        </t>
      <t>
For backward compatibility for non-PvD-aware applications, there MUST exist a "default PvD", i.e. a PvD within which system functions requiring a PvD are to be performed.
      </t>
      <t>
It is expected that most nodes will use a variety of information coupled with administrative policy to promote one of a number of currently active PvDs to be the default for ease of backward compatibility, and to
promote another active PvD in its place as circumstances change.
      </t>
      </section>
    </section>

    <section title="New API functions for learning about PvDs">
      <t>
- MUST existence (subject to policy)
    - both implicit and explicit PvDs must also be included in the API response
    - PvD-aware applications need to be able to specify that some functionality should be scoped to an implicit PvD
- updates to availability
    - SHOULD new
    - SHOULD configuration changes (app may also learn via errors)
    - MAY going away (useful)
    - MAY gone (app may also learn via errors)
- configuration
    - SHOULD be an API to get configuration information for a specific PvD
    - such an API MUST be easily extensible to support configuration information not yet considered
Reason to be extensible:
    - methods to get attributes of a PVD, like whether it
      is comprised of a mobile link versus wifi/ethernet, whether there
      is some metering/charging associated with traffic sent/received via
      this PVD or not, etc.

The same PvD may arrive on another interface (3GPP interface and WLAN -- find 3gpp spec reference).
This API MUST be extenible, as PvD information is not guaranteed to be learned atomically nor is it guaranteed to be static. Furthermore, this API needs to
be extensible in order to accomodate requesting new configuration information not yet conceived of at this time, e.g. a new FOO protocol is used within a given PvD and
it's important for applications to learn that they need to use the proxy BAR for best performance.
      </t>
    </section>

    <section title="New API functions for scoping functionality to a specific PvD">
      <t>
- apps SHOULD be able to specify which PvD is to be used for network-related functionality at the granularity of programming parallelism:
    - per-process (and child processes)
    - per-thread
    - per-fiber
    - useful for being able to start non-PvD-aware apps within a single PvD context unbeknownst to them and operate correctly
        - indeed, this could be used as a definition / validation that a PvD implemention is correct: non-PvD-aware apps function correctly, with no negative impact, in a single PvD without being PvD-aware
- also per application control (e.g. process groups)
      </t>
      <t>
<figure>
<artwork>
<![CDATA[


// Not guaranteed to be stable across across associations to a PVD.
//
// The same PVD may have different pvd_handle_t's if, for example,
// when reattaching later to the same PVD (returning home in the
// evening), the same PVD may be assigned a different pvd_handle_t.
//
// The pvd_handle_t must remain valid until a disconnection or
// disassociation event occurs, after which the pvd_handle_t MUST NOT
// be recycled to refer to a different PVD so long as there remain
// any identifiable references to it (e.g. a process or thread still
// has this PVD index set as its default).
//
// Applications explicitly specifying PVD indices to PVD-aware
// functions are not readily identifiable (indeed an application
// could progressively walk the PVD index space attempting various
// function calls without ever having received any indication from
// the system that a given index was valid).  In order to account for
// this, PVD indices SHOULD NOT be recycled, to the extent possible.
// One acceptable implementation approach is to assign every new PVD
// context a strictly monotically increasing index, such that any
// specific index is not reused until the unsigned integer space has
// been completely exhausted, before restarting again from 1.
typedef unsigned int pvd_handle_t;

// The value PVD_HANDLE_UNSPEC is used to indicate no specific PVD.
//
// Depending on the context it may indicate that the system does not
// implement support for the Provisioning Domain API, an error, or
// a signal to "clear" previous PVD index state.
#define PVD_HANDLE_UNSPEC ((pvd_handle_t)0)

// Retrieve the current "default" PVD.  If the return type is
// PVD_HANDLE_INVALID there may be no PVD accessible to this process
// at this time or no system support for this API.
//
// These values are used by PVD-aware function calls when a PVD index
// is not explicitly specified.
pvd_handle_t pvd_system_default();

// Same as above, but operates at a per-process level.  If no
// process-specific default has been set this MUST return the value
// of a call to pvd_current_system_default().
pvd_handle_t pvd_process_default();

// Same as above, but operates at a per-thread level.  If no
// thread-specific default has been set this MUST return the value
// of a call to pvd_current_process_default().
pvd_handle_t pvd_thread_default();

int pvd_set_process_default(pvd_handle_t);  // 0 or -1 && errno = EFOO
int pvd_set_thread_default(pvd_handle_t);  // 0 or -1 && errno = EFOO

// Any function that is not easily extended to support a pvd_handle_t
// argument, but for which the underlying operating system understands
// the process-global or per-thread pvd_index can be wrapped to create
// a PVD-aware variant like so:
//
// return_type pvd_functioname(pvd_handle_t pvdix, regular arguments...) {
//     pvd_handle_t saved = pvd_thread_default();
//     if (pvd_set_thread_default(pvdix) != 0) {
//         // handle error
//         return error_indicator_value;
//     }
//     return_type result = functionname(regular arguments...);
//     pvd_set_thread_default(saved);  // Should error-check
//     return result;
// }

]]>
</artwork>
</figure>
      </t>
    </section>

    <section title="Updated API functions for scoping functionality to a specific PvD">
      <t>
- everything that implicitly used a single PvD, e.g. when a single interface was connected to a single PvD network, SHOULD be extended to be invoked with a PvD argument
      </t>
      <t>
In order to ease porting of non-PVD-aware applications as well as support
non-PVD-aware applications in accordance with the principle of least surprise
it is recommended that the following functionality be added to existing
system networking APIs.
      </t>
      <t>
sockets API

- setsockopt() / getsockopt()
    - IP_RECVPVD / IPV6_RECVPVD
        - recvmsg() should include indication of PVD to which the packet arrived
    - IP_PVD / IPV6_PVD
        - source address selection and applicable routing table is restricted to the specified PvD
        - if a source address has already been selected from one PvD, transmitting via another PvD is NOT RECOMMENDED (but of course possible)
    - PVD_UNSPECIFIED
        - no PvD explicitly requested
        - also used to clear a process or thread default and revert to system default
    - for PF_INET / PF_INET6 sockets

- socket()
    - if a process-default or thread-default PvD has been set, the returned file descriptor must be "bound" to the PvD
        - i.e. as if setsockopt(SOL_IPV6, IPV6_PVD, ...) had been called
    - otherwise, the file descriptor defaults to PVD_UNSPECIFIED

- bind()
    - if a PvD is specified and address is unspecified, it is RECOMMENDED source address selection be restricted to this PVD
    - else if a PvD is specified and address is not unspecified, EADDRNOTAVAIL might be returned
    - else best effort / system-specific policies apply

- listen()
    - if the file descriptor is already bound to a PvD, only traffic to one of the PvD's addresses should cause the file descriptor to become readable
    - other traffic should receive an ICMP error

- accept()
    - returned file descriptors should be bound to the PvD of:
        - the listening socket, if it was not bound to PVD_UNSPECIFIED
        - the PvD of the destination address on the system

- connect()
    - bind() discussion applies for source address selection
    - EHOSTUNREACH / ENETUNREACH might be returned

sendmsg() / recvmsg() cmsg semantics
- setsockopt() / getsockopt() options apply
    - IP_RECVPVD / IPV6_RECVPV6
    - IP_PVD / IPV6_PVD
- source address selection discussion applies for IP_PVD / IPV6_PVD
    - some combinations just may not work
    - some may require privileges to even attempt
      </t>
      <t>
- sockets examples:
<figure>
<artwork>
<![CDATA[

/*
 * getsockopt()/setsockopt()
 *
 * The header file <sys/socket.h> SHALL define SO_PVD_HANDLE in supporting
 * implementations, for use with getsockopt/setsockopt and the SOL_SOCKET
 * level.  The option_value shall be understood to be a pointer to a
 * pvd_handle_t and the option_len is required to be sizeof(pvd_handle_t).
 *
 * Setting the SO_PVD_HANDLE option constrains all operations on the
 * specified socket to function only within the specified PVD currently
 * described by pvd_handle_t.  If the pvd_handle_t argument has the value
 * PVD_HANDLE then the operating-system policy-defined default is
 * to be used (see <net/pvd.h>).
 */
#define SO_PVD_HANDLE  some_implementation_specific_value


/*
 * recvmsg()/sendmsg()
 *
 * The same SO_PVD_HANDLE defined above shall be used as the cmsg_type in
 * conjunction with the SOL_SOCKET cmsg_level to specify struct cmsghdr
 * entries for use with recvmsg() and sendmsg().  These have the same
 * effect described above though applicability is limited to the immediate
 * sendmsg()/recvmsg() invocaton and not for the lifetime the socket file
 * descriptor.
 *
 * In certain situations it may be difficult or impossible for an operating
 * system to determing the correct pvd_handle_t for incoming messages (e.g.
 * when there are multiple provisioning domains in a single interface and
 * the system is unable to determine which PVD should be associated with
 * the source of the message.  In such cases, the value returned in the
 * cmsg_data field MAY be PVD_HANDLE. This is not an error, but
 * rather an underspecified situation.
 */


/*
 * accept()
 *
 * If a listening socket is associated with a single PVD, e.g. via a prior
 * call to pvd_set_*_default(...) or setsockopt(SOL_SOCKET, SO_PVD_HANDLE, ...)
 * then traffic arriving from other provisioning domains MUST NOT cause a new
 * connection.
 *
 * Furthermore, whether or not a listening socket has a specified PVD, the
 * specified PVD MUST be set for the accept()ed file descriptor.  Note that
 * in certain situations (e.g. listening socket using PVD_HANDLE_UNSPEC and
 * multiple PVDs on a single interface with insufficient data to map
 * incoming traffic to specific PVDs), the specified PVD MAY be
 * PVD_HANDLE_UNSPEC.  This is not an error, but rather an underspecified
 * situation.
 *
 * More broadly, operating systems SHOULD, wherever possible, implement
 * this style of incoming specified pvd_handle_t reflection for other protocols
 * with similar accept()-style semantics.
 */

/*
 * getaddrinfo w/ pvd_handle_t argument
 */

/*
 * getnameinfo w/ pvd_handle_t argument
 */

]]>
</artwork>
</figure>
      </t>

    </section>

<!--

Notes

handle
  - node-specific token used to identify an instance of a single provisioning domain's configuration data
      - interface(s)
      - routes
      - addresses
      - DNS servers
      - DHCP(v4/v6) servers
      - any other provisioning domain configuration data

This data generally does not become available to a node in an atomic fashion, and can change over time
(RAs with 6106 that add or replace DNS servers in previous RAs, ...).

Routes and prefixes can come and go and yet all be part of the same provisioning domain.

  - a given provisioning domain MUST NOT be assumed to have the same handle across attaches

  - implementations SHOULD NOT re-use the same handle for the same provisioning domain across
    attaches because: awesome explanation goes here.

System requirements
Systems which support PVD API calls should set the PVD_HANDLE on incoming packets so that applications
can automatically do the right thing.

what to do with process and thread default values on fork/exec

RFC7556 section 5:
5.1 Name Resolution

A PVD-aware API MUST make it possible for an application to perform
normal name resolution constrained to the name resolution configuration
within a specified PVD.

Ex: extended getaddrinfo with support for a pvd_handle_t argument.

### Presentation notes


## 2
what things do apps need?

- socket-level control
    - control routing and address selection
    - automatic PvD "tagging" of incoming traffic not already classified
- DNS resolution:
    - which DNS servers and search path to use
    - correct routing to those DNS servers
    - don't want to query the right DNS server via the wrong network
- useful errors (a la ENONET, ...)

## 4
new things to define

- get PvD configuration data
    - notification of configuration changes
    - figure out how to express PvD <-> interface/scope_id relationship
- set/get process default PvD, thread default PvD
- a simple programmatic way to reference a specific PvD in these calls
    - e.g.: typedef uint64_t pvd_reference_t
    - separate attaches to the same PvD may be assigned different pvd_ref_t values
    - may help for distinguishing implicit PvDs
    - PVD_UNSPECIFIED


## 7
DNS resolution

- can be implemented with per-PvD DNS server and search path state
- use sockets API changes for reaching specified nameservers
- maybe extend getaddrinfo(..., hints, ...)
    struct addrinfo {
        int ai_flags;
        ...
    #ifdef HAVE_PVD_API
        pvd_reference_t ai_pvd;
    #endif
    };
- what about getnameinfo(), res_query(), and getdnsapi ?

-->

<!--
Explicit versus Implicit PvDs
- the API used by PvD-aware applications MUST support both implicit and explicit PvDs
- It SHOULD NOT be necessary for a PvD-aware application to distinguish between explicit and implicit PvDs.  Both SHOULD be equally accessible and useful via the same API calls.
- PvD-aware nodes should provide PvD identifiers for implicit PvDs that can be used with out application change in the same ways as explicit PvDs



 -->

    <section anchor="tl_dr" title="TL;DR">
      <t>
<list counter="reqs" hangIndent="4" style="format R%d">
<t>
An API call MUST exist whereby an application can learn the identifiers, or short handles, of all PvDs active on the system at the time.
</t>
<t>
An MPvD API implementation MUST include a mechanism whereby an application can learn of/be notified of: the arrival of new PvDs or the anticipated removal of a PvD.
Actual removal of a PvD can be learned by observing any blocking PvD API operation for errors indicating the loss of the PvD (e.g. a socket read() returning ENONET).
</t>
<t>
API implementations that use short handles to reference PvD information (identifiers, configuration information) SHOULD consider varying the handle used for
a specific PvD with each separate attach, e.g. a 3GPP connection to "apn.carrier.example" might have handle 100 for the first attach after boot,
and 101 for the next attach after going into and coming out of "airplane mode".  Because there is no guarantee that the configuration information, like delegated
prefixes and configured IP addresses, will be the same with every successful attachment to the same PvD, changing the handle accordingly can help
to disabuse application writers of erroneous notions of caching PvD configuration information from one attachment instance to another.
</t>
<t>
There MUST be an API call which, when passed a PvD identifier or short handle, returns elements of configuration information specific to that PvD.
</t>
<t>
An MPvD API implementation MUST include a mechanism whereby an application can learn of changes to the configuration information of a given PvD, e.g. a new temporary
address has been formed, a new secondary DNS server has replaced the previous secondary, et cetera.
</t>
<t>
For every element of system functionality that has historically been performed in the context of a single, implicit PvD an API extension MUST exist allowing the application to specificy that the same functionality be
performed within the scope of an explicitly requested PvD (via identifier or handle).
</t>
<t>
</t>
</list>
      </t>
    </section>

    <section anchor="req_new_api" title="Requirements for new API functionality">
      <t>
API implementors SHOULD provide a mechanism for an application to set its default PvD, i.e. the PvD to be used by API calls made without reference to an explicit PvD.
      </t>
      <t>
API implementors SHOULD provide a mechanism for an application to set its default PvD at the granularity of "programming parallelization": per-process, per-thread, per-fiber, et cetera.
      </t>
      <t>
Given that PvD identifiers may be of a length or form not easily passed around programmatically, API implementions SHOULD consider a programmatically simple handle for use with the variety of API calls.

https://tools.ietf.org/html/rfc7556#section-2.4
      </t>
      <t>
An MPvD API implementation SHOULD consider implementing policy controls
      </t>
    </section>

    <section anchor="acks" title="Acknowledgements">
      <t>
The core concepts presented in this document were developed during the
Android multinetworking effort by Lorenzo Colitti, Robert Greenwalt,
Paul Jensen, and Sreeram Ramachandran.
      </t>
      <t>
Additional thanks to the coffee shops of Tokyo.
      </t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>
Consider whether 7556 section 8 should be referenced.  Possibly not, since
those seem to be focused on external PvD-altering threats.
      </t>
      <t>
The major new security impact of an MPvD API is that it becomes much
simpler (by design) to write a functional application to create a bridging
data path between two PvDs that would not have otherwise been directly
connected.
      </t>
      <t>
For some operating systems, existing APIs already make this bridging
possible, though some functionality like DNS resolution may have been
difficult to implement.  Indeed, the very aim of an MPvD API is to make
implementing a PvD-aware application simple and to make its functioning
more "correct" ("first class" support for such functionality).
      </t>
      <t>
Operating system implementations have several points of potential policy
control including:
        <list style="symbols">
          <t>
use of certain PvDs MAY be restricted by policy (e.g. only approved users,
groups, or applications might be permitted access), and/or
          </t>
          <t>
use of more than one PvD (or the MPvD API itself) MAY be similarly restricted.
          </t>
        </list>
      </t>
    </section>
  </middle>


  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      &RFC2119;
      &RFC6724;
      &RFC7556;
    </references>

    <references title="Informative References">
      &RFC6418;
      &RFC6419;
    </references>

<!--
    <section anchor="android-comparison" title="Comparison with Android implementation">
      <t>This becomes an Appendix.</t>
    </section>
-->
  </back>
</rfc>
