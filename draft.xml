<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->

<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2629 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2629.xml">
<!ENTITY RFC3552 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3552.xml">
<!ENTITY I-D.narten-iana-considerations-rfc2434bis SYSTEM "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.narten-iana-considerations-rfc2434bis.xml">

<!ENTITY RFC6418 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6418.xml">
<!ENTITY RFC6419 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6419.xml">
<!ENTITY RFC7556 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7556.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="info" docName="draft-kline-mif-pvd-application-api-00" ipr="trust200902">
  <!-- category values: std, bcp, info, exp, and historic
     ipr values: full3667, noModification3667, noDerivatives3667
     you can add the attributes updates="NNNN" and obsoletes="NNNN"
     they will automatically be output with "(if approved)" -->

  <front>
    <title abbrev="MPVD Application API">Multiple Provisioning Domains Application API</title>

    <author fullname="Erik Kline"
            initials="E." surname="Kline"
            role="editor">
      <organization>Google Japan KK</organization>
      <address>
        <postal>
          <street>Roppongi 6-10-1</street>
          <street>Mori Tower, 26th floor</street>
          <city>Minato</city>
          <region>Tokyo</region>
          <code>106-6128</code>
          <country>JP</country>
        </postal>
        <phone></phone>
        <email>ek@google.com</email>
      </address>
    </author>

    <date month="June" year="2015" />

    <!-- Meta-data Declarations -->

    <area>General</area>

    <workgroup>Internet Engineering Task Force</workgroup>

    <!-- WG name at the upperleft corner of the doc,
         IETF is fine for individual submissions.
	 If this element is not present, the default is "Network Working Group",
         which is used by the RFC Editor as a nod to the history of the IETF. -->

    <keyword>api</keyword>
    <keyword>application</keyword>
    <keyword>mif</keyword>
    <keyword>mpvd</keyword>
    <keyword>pvd</keyword>

    <abstract>
      <t>
Insert an abstract: MANDATORY. This template is for creating an Internet Draft.
      </t>
    </abstract>
  </front>

  <middle>
<!--

Notes

handle
  - node-specific token used to identify an instance of a single provisioning domain's configuration data
      - interface(s)
      - routes
      - addresses
      - DNS servers
      - DHCP(v4/v6) servers
      - any other provisioning domain configuration data

This data generally does not become available to a node in an atomic fashion, and can change over time
(RAs with 6106 that add or replace DNS servers in previous RAs, ...).

Routes and prefixes can come and go and yet all be part of the same provisioning domain.

  - a given provisioning domain MUST NOT be assumed to have the same handle across attaches

  - implementations SHOULD NOT re-use the same handle for the same provisioning domain across
    attaches because: awesome explanation goes here.

System requirements
Systems which support PVD API calls should set the PVD_HANDLE on incoming packets so that applications
can automatically do the right thing.

what to do with process and thread default values on fork/exec

http://tools.ietf.org/html/rfc1122 section 3.3.4.2:  Strong/Weak ES model

RFC7556 section 5:
5.1 Name Resolution

A PVD-aware API MUST make it possible for an application to peform
normal name resolution constrained to the name resolution configuration
within a specified PVD.

Ex: extended getaddrinfo with support for a pvd_handle_t argument.

### Presentation notes

## 1
PvD

. RFC7556 section 2
    . "A consistent set of network configuration information..."
- includes:
    - participating interfaces
    - addresses
    - routes
    - default routes, of course
    - but also RIO -type information
    - DNS servers and search path
    - HTTP proxy
    - yet to be specified: metering, medium, captive portal URL, ...
- not learned atomically
- not static

## 2
what things do apps need?

- PvD configuration information
    - get config data, get notified of updates
- PvD selection
    - granularity: system default + per process / thread / file descriptor / ...
- socket-level control
    - control routing and address selection
    - automatic PvD "tagging" of incoming traffic not already classified
- DNS resolution:
    - which DNS servers and search path to use
    - correct routing to those DNS servers
    - don't want to query the right DNS server via the wrong network
- useful errors (a la ENONET, ...)

## 3
source address and routing selection

- if a PvD has been specified:
    - it is RECOMMENDED that source address selection be restricted to PvD addresses
        - update RFC6274#section-4
- it is important to return errors
    - might have two PvDs active: one IPv4-only and one IPv6-only
        - ENONET, EPROTONOSUPPORT, EADDRNOTAVAIL, EHOSTUNREACH, ...
- destination reachability:
    - userspace libraries often use connect() tricks to obtain source addresses for sorting
    - this MUST use the routing configuration of the desired PvD
- getaddrinfo() and AI_ADDRCONFIG
    - RFC3493#section-6.1 "...shall be returned only if an IPv4/v6 address is configured on the local system..." -> "... within the requested PvD"

## 4
new things to define

- get PvD configuration data
    - should be extensible
        - struct with #ifdef extra members?
        - separate query for each configuration element of interest (a la getsockopt())?
    - notification of configuration changes
    - figure out how to express PvD <-> interface/scope_id relationship
- set/get process default PvD, thread default PvD
- a simple programmatic way to reference a specific PvD in these calls
    - e.g.: typedef uint64_t pvd_reference_t
    - separate attaches to the same PvD may be assigned different pvd_ref_t values
    - may help for distinguishing implicit PvDs
    - PVD_UNSPECIFIED

## 5
some sockets API considerations

- basically the strong host model
    - except that PvD:interfaces is m:n
    - PvD IDs could be thought of as site-local scopes
- requests for a PvD not currently configured should return ENONET
    - other useful errors need to be returned throughout
    - some of this may want to be relaxed for privileged users
- per packet PvD selection? ... maybe, maybe not
    - once a source address has been selected, using it to send traffic via a different PvD is essentially best effort / subject to system-specific policy

## 6
sockets API

- setsockopt() / getsockopt()
    - IP_RECVPVD / IPV6_RECVPVD
        - recvmsg() should include indication of PVD to which the packet arrived
    - IP_PVD / IPV6_PVD
        - source address selection and applicable routing table is restricted to the specified PvD
        - if a source address has already been selected from one PvD, transmitting via another PvD is NOT RECOMMENDED (but of course possible)
    - PVD_UNSPECIFIED
        - no PvD explicitly requested
        - also used to clear a process or thread default and revert to system default
    - for PF_INET / PF_INET6 sockets

- socket()
    - if a process-default or thread-default PvD has been set, the returned file descriptor must be "bound" to the PvD
        - i.e. as if setsockopt(SOL_IPV6, IPV6_PVD, ...) had been called
    - otherwise, the file descriptor defaults to PVD_UNSPECIFIED

- bind()
    - if a PvD is specified && address is unspecified, it is RECOMMENDED source address selection be restricted to this PVD
    - else if a PvD is specified && address is not unspecified, EADDRNOTAVAIL might be returned
    - else best effort / system-specific policies apply

- listen()
    - if the file descriptor is already bound to a PvD, only traffic to one of the PvD's addresses should cause the file descriptor to become readable
    - other traffic should receive an ICMP error

- accept()
    - returned file descriptors should be bound to the PvD of:
        - the listening socket, if it was not bound to PVD_UNSPECIFIED
        - the PvD of the destination address on the system

- connect()
    - bind() discussion applies for source address selection
    - EHOSTUNREACH / ENETUNREACH might be returned

sendmsg() / recvmsg() cmsg semantics
- setsockopt() / getsockopt() options apply
    - IP_RECVPVD / IPV6_RECVPV6
    - IP_PVD / IPV6_PVD
- source address selection discussion applies for IP_PVD / IPV6_PVD
    - some combinations just may not work
    - some may require privileges to even attempt

## 7
DNS resolution

- can be implemented with per-PvD DNS server and search path state
- use sockets API changes for reaching specified nameservers
- maybe extend getaddrinfo(..., hints, ...)
    struct addrinfo {
        int ai_flags;
        ...
    #ifdef HAVE_PVD_API
        pvd_reference_t ai_pvd;
    #endif
    };
- what about getnameinfo(), res_query(), and getdnsapi ?

-->
    <section title="Introduction">
      <t>
      </t>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref
        target="RFC2119">RFC 2119</xref>.</t>
      </section>
    </section>

    <section anchor="tbd" title="TBD">
      <t>
      </t>
    </section>

    <section anchor="system_reqs" title="Host Operating System Requirements">
      <t>
In order to support the application's use of multiple PVDs, several
requirements must be fulfilled by the part of the host operating system
authorized to perform the required functions.
      </t>
    </section>

    <section anchor="new_functions" title="New functionality">
      <t>
      </t>
    </section>

    <section anchor="update_current" title="Updates to current functionality">
      <t>
In order to ease porting of non-PVD-aware applications as well as support
non-PVD-aware applications in accordance with the principal of least surprise
it is recommended that the following functionality be added to existing
system networking APIs.
      </t>
    </section>

    <section anchor="simple_list" title="Simple List">
      <t>List styles: 'empty', 'symbols', 'letters', 'numbers', 'hanging',
      'format'.</t>

      <t><list style="symbols">
          <t>First bullet</t>

          <t>Second bullet</t>
        </list> You can write text here as well.</t>
    </section>

    <section title="Figures">
      <t>Figures should not exceed 69 characters wide to allow for the indent
      of sections.</t>

      <figure align="center" anchor="xml_happy">
        <preamble>Preamble text - can be omitted or empty.</preamble>

        <artwork align="left"><![CDATA[
+-----------------------+
| Use XML, be Happy :-) |
|_______________________|
            ]]></artwork>

        <postamble>Cross-references allowed in pre- and postamble. <xref
        target="min_ref" />.</postamble>
      </figure>

      <t>The CDATA means you don't need to escape meta-characters (especially
      &lt;&nbsp;(&amp;lt;) and &amp;&nbsp;(&amp;amp;)) but is not essential.
      Figures may also have a title attribute but it won't be displayed unless
      there is also an anchor. White space, both horizontal and vertical, is
      significant in figures even if you don't use CDATA.</t>
    </section>

    <!-- This PI places the pagebreak correctly (before the section title) in the text output. -->

    <?rfc needLines="8" ?>

    <section title="Subsections and Tables">
      <section title="A Subsection">
        <t>By default 3 levels of nesting show in table of contents but that
        can be adjusted with the value of the "tocdepth" processing
        instruction.</t>
      </section>

      <section title="Tables">
        <t>.. are very similar to figures:</t>

        <texttable anchor="table_example" title="A Very Simple Table">
          <preamble>Tables use ttcol to define column headers and widths.
          Every cell then has a "c" element for its content.</preamble>

          <ttcol align="center">ttcol #1</ttcol>

          <ttcol align="center">ttcol #2</ttcol>

          <c>c #1</c>

          <c>c #2</c>

          <c>c #3</c>

          <c>c #4</c>

          <c>c #5</c>

          <c>c #6</c>

          <postamble>which is a very simple example.</postamble>
        </texttable>
      </section>
    </section>

    <section anchor="nested_lists" title="More about Lists">
      <t>Lists with 'hanging labels': the list item is indented the amount of
      the hangIndent: <list hangIndent="8" style="hanging">
          <t hangText="short">With a label shorter than the hangIndent.</t>

          <t hangText="fantastically long label">With a label longer than the
          hangIndent.</t>

          <t hangText="vspace_trick"><vspace blankLines="0" />Forces the new
          item to start on a new line.</t>
        </list></t>

      <!-- It would be nice to see the next piece (12 lines) all on one page. -->

      <?rfc needLines="12" ?>

      <t>Simulating more than one paragraph in a list item using
      &lt;vspace&gt;: <list style="letters">
          <t>First, a short item.</t>

          <t>Second, a longer list item.<vspace blankLines="1" /> And
          something that looks like a separate pararaph..</t>
        </list></t>

      <t>Simple indented paragraph using the "empty" style: <list
          hangIndent="10" style="empty">
          <t>The quick, brown fox jumped over the lazy dog and lived to fool
          many another hunter in the great wood in the west.</t>
        </list></t>

      <section title="Numbering Lists across Lists and Sections">
        <t>Numbering items continuously although they are in separate
        &lt;list&gt; elements, maybe in separate sections using the "format"
        style and a "counter" variable.</t>

        <t>First list: <list counter="reqs" hangIndent="4" style="format R%d">
            <t>#1</t>

            <t>#2</t>

            <t>#3</t>
          </list> Specify the indent explicitly so that all the items line up
        nicely.</t>

        <t>Second list: <list counter="reqs" hangIndent="4" style="format R%d">
            <t>#4</t>

            <t>#5</t>

            <t>#6</t>
          </list></t>
      </section>

      <section title="Where the List Numbering Continues">
        <t>List continues here.</t>

        <t>Third list: <list counter="reqs" hangIndent="4" style="format R%d">
            <t>#7</t>

            <t>#8</t>

            <t>#9</t>

            <t>#10</t>
          </list> The end of the list.</t>
      </section>
    </section>

    <section anchor="codeExample"
             title="Example of Code or MIB Module To Be Extracted">
      <figure>
        <preamble>The &lt;artwork&gt; element has a number of extra attributes
        that can be used to substitute a more aesthetically pleasing rendition
        into HTML output while continuing to use the ASCII art version in the
        text and nroff outputs (see the xml2rfc README for details). It also
        has a "type" attribute. This is currently ignored except in the case
        'type="abnf"'. In this case the "artwork" is expected to contain a
        piece of valid Augmented Backus-Naur Format (ABNF) grammar. This will
        be syntax checked by xml2rfc and any errors will cause a fatal error
        if the "strict" processing instruction is set to "yes". The ABNF will
        also be colorized in HTML output to highlight the syntactic
        components. Checking of additional "types" may be provided in future
        versions of xml2rfc.</preamble>

        <artwork><![CDATA[

/**** an example C program */

#include <stdio.h>

void
main(int argc, char *argv[])
{
    int i;

    printf("program arguments are:\n");
    for (i = 0; i < argc; i++) {
        printf("%d: \"%s\"\n", i, argv[i]);
    }

    exit(0);
} /* main */

/* end of file */

            ]]></artwork>
      </figure>
    </section>

    <section anchor="new_api_definitions" title="New API Definitions">
      <t>
<!--

// Not guaranteed to be stable across across associations to a PVD.
//
// The same PVD may have different pvd_handle_t's if, for example,
// when reattaching later to the same PVD (returning home in the
// evening), the same PVD may be assigned a different pvd_handle_t.
//
// The pvd_handle_t must remain valid until a disconnection or
// disassociation event occurs, after which the pvd_handle_t MUST NOT
// be recycled to refer to a different PVD so long as there remain
// any identifiable references to it (e.g. a process or thread still
// has this PVD index set as its default).
//
// Applications explicitly specifying PVD indices to PVD-aware
// functions are not readily identifiable (indeed an application
// could progressively walk the PVD index space attempting various
// function calls without ever having received any indication from
// the system that a given index was valid).  In order to account for
// this, PVD indices SHOULD NOT be recycled, to the extent possible.
// One acceptable implementation approach is to assign every new PVD
// context a strictly monotically increasing index, such that any
// specific index is not reused until the unsigned integer space has
// been completely exhausted, before restarting again from 1.
typedef unsigned int pvd_handle_t;

// The value PVD_HANDLE_UNSPEC is used to indicate no specific PVD.
//
// Depending on the context it may indicate that the system does not
// implement support for the Provisioning Domain API, an error, or
// a signal to "clear" previous PVD index state.
#define PVD_HANDLE_UNSPEC ((pvd_handle_t)0)

// Retrieve the current "default" PVD.  If the return type is
// PVD_HANDLE_INVALID there may be no PVD accessible to this process
// at this time or no system support for this API.
//
// These values are used by PVD-aware function calls when a PVD index
// is not explicitly specified.
pvd_handle_t pvd_system_default();

// Same as above, but operates at a per-process level.  If no
// process-specific default has been set this MUST return the value
// of a call to pvd_current_system_default().
pvd_handle_t pvd_process_default();

// Same as above, but operates at a per-thread level.  If no
// thread-specific default has been set this MUST return the value
// of a call to pvd_current_process_default().
pvd_handle_t pvd_thread_default();

int pvd_set_system_default(pvd_handle_t);  // 0 or -1 && errno = EFOO
int pvd_set_process_default(pvd_handle_t);  // 0 or -1 && errno = EFOO
int pvd_set_thread_default(pvd_handle_t);  // 0 or -1 && errno = EFOO

// Any function that is not easily extended to support a pvd_handle_t
// argument, but for which the underlying operating system understands
// the process-global or per-thread pvd_index can be wrapped to create
// a PVD-aware variant like so:
//
// return_type pvd_functioname(pvd_handle_t pvdix, regular arguments...) {
//     pvd_handle_t saved = pvd_thread_default();
//     if (pvd_set_thread_default(pvdix) != 0) {
//         // handle error
//         return error_indicator_value;
//     }
//     return_type result = functionname(regular arguments...);
//     pvd_set_thread_default(saved);  // Should error-check
//     return result;
// }

#if 0
Things thare are missing include:

    - should there be a PVD index defined for "node-local"?
      Regardless, need text about what PVD loopback is in or why it's
      in every PVD or...


    - methods to get attributes of a PVD, like whether it
      is comprised of a mobile link versus wifi/ethernet, whether there
      is some metering/charging associated with traffic sent/received via
      this PVD or not, etc.


    - method to get a list of all current PVDs.


    - method to map pvd_handle_t's to if_index.

// C.f. if_nameindex()
struct pvd_if_indices {
  pvd_handle_t pvd_index;
  unsigned int if_index;
};

  -->
      </t>
      <t>
      </t>
    </section>

    <section anchor="sockets_api_updates"
             title="Extensions for Existing Sockets API Functions">
      <t>
<!--

/*
 * getsockopt()/setsockopt()
 *
 * The header file <sys/socket.h> SHALL define SO_PVD_HANDLE in supporting
 * implementations, for use with getsockopt/setsockopt and the SOL_SOCKET
 * level.  The option_value shall be understood to be a pointer to a
 * pvd_handle_t and the option_len is required to be sizeof(pvd_handle_t).
 *
 * Setting the SO_PVD_HANDLE option constrains all operations on the
 * specified socket to function only within the specified PVD currently
 * described by pvd_handle_t.  If the pvd_handle_t argument has the value
 * PVD_HANDLE then the operating-system policy-defined default is
 * to be used (see <net/pvd.h>).
 */
#define SO_PVD_HANDLE  some_implementation_specific_value


/*
 * recvmsg()/sendmsg()
 *
 * The same SO_PVD_HANDLE defined above shall be used as the cmsg_type in
 * conjunction with the SOL_SOCKET cmsg_level to specify struct cmsghdr
 * entries for use with recvmsg() and sendmsg().  These have the same
 * effect described above though applicability is limited to the immediate
 * sendmsg()/recvmsg() invocaton and not for the lifetime the socket file
 * descriptor.
 *
 * In certain situations it may be difficult or impossible for an operating
 * system to determing the correct pvd_handle_t for incoming messages (e.g.
 * when there are multiple provisioning domains in a single interface and
 * the system is unable to determine which PVD should be associated with
 * the source of the message.  In such cases, the value returned in the
 * cmsg_data field MAY be PVD_HANDLE. This is not an error, but
 * rather an underspecified situation.
 */


/*
 * accept()
 *
 * If a listening socket is associated with a single PVD, e.g. via a prior
 * call to pvd_set_*_default(...) or setsockopt(SOL_SOCKET, SO_PVD_HANDLE, ...)
 * then traffic arriving from other provisioning domains MUST NOT cause a new
 * connection.
 *
 * Furthermore, whether or not a listening socket has a specified PVD, the
 * specified PVD MUST be set for the accept()ed file descriptor.  Note that
 * in certain situations (e.g. listening socket using PVD_HANDLE_UNSPEC and
 * multiple PVDs on a single interface with insufficient data to map
 * incoming traffic to specific PVDs), the specified PVD MAY be
 * PVD_HANDLE_UNSPEC.  This is not an error, but rather an underspecified
 * situation.
 *
 * More broadly, operating systems SHOULD, wherever possible, implement
 * this style of incoming specified pvd_handle_t reflection for other protocols
 * with similar accept()-style semantics.
 */

/*
 * getaddrinfo w/ pvd_handle_t argument
 */

/*
 * getnameinfo w/ pvd_handle_t argument
 */

  -->
      </t>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>
The core concepts for this approach were developed for the Android
multinetworking effort by Lorenzo Colitti, Robert Greenwalt, Paul Jensen,
and Sreeram Ramachandran.
      </t>
    </section>

    <!-- Possibly a 'Contributors' section ... -->

    <section anchor="IANA" title="IANA Considerations">
      <t>This memo includes no request to IANA.</t>

      <t>All drafts are required to have an IANA considerations section (see
      <xref target="I-D.narten-iana-considerations-rfc2434bis">the update of
      RFC 2434</xref> for a guide). If the draft does not require IANA to do
      anything, the section contains an explicit statement that this is the
      case (as above). If there are no requirements for IANA, the section will
      be removed during conversion into an RFC by the RFC Editor.</t>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>All drafts are required to have a security considerations section.
      See <xref target="RFC3552">RFC 3552</xref> for a guide.</t>
    </section>
  </middle>

  <!--  *****BACK MATTER ***** -->

  <back>
    <!-- References split into informative and normative -->

    <!-- There are 2 ways to insert reference entries from the citation libraries:
     1. define an ENTITY at the top, and use "ampersand character"RFC2629; here (as shown)
     2. simply use a PI "less than character"?rfc include="reference.RFC.2119.xml"?> here
        (for I-Ds: include="reference.I-D.narten-iana-considerations-rfc2434bis.xml")

     Both are cited textually in the same manner: by using xref elements.
     If you use the PI option, xml2rfc will, by default, try to find included files in the same
     directory as the including file. You can also define the XML_LIBRARY environment variable
     with a value containing a set of directories to search.  These can be either in the local
     filing system or remote ones accessed by http (http://domain/dir/... ).-->

    <references title="Normative References">
      <!--?rfc include="http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml"?-->
      &RFC2119;

      <reference anchor="min_ref">
        <!-- the following is the minimum to make xml2rfc happy -->

        <front>
          <title>Minimal Reference</title>

          <author initials="authInitials" surname="authSurName">
            <organization></organization>
          </author>

          <date year="2006" />
        </front>
      </reference>
    </references>

    <references title="Informative References">
      <!-- Here we use entities that we defined at the beginning. -->

      &RFC2629;

      &RFC3552;

      &I-D.narten-iana-considerations-rfc2434bis;

      <!-- A reference written by an organization not a person. -->

      <reference anchor="DOMINATION"
                 target="http://www.example.com/dominator.html">
        <front>
          <title>Ultimate Plan for Taking Over the World</title>

          <author>
            <organization>Mad Dominators, Inc.</organization>
          </author>

          <date year="1984" />
        </front>
      </reference>
    </references>

    <section anchor="android-comparison" title="Comparison with Android implementation">
      <t>This becomes an Appendix.</t>
    </section>
  </back>
</rfc>
